{"version":3,"sources":["Home/Home.js","Navbar/Navbar.js","FooterBar/footerbar.js","SortingVisualizer/SortingVisualizer.js","PathfindingVisualizer/Node/Node.js","Algorithms/PathFinding Algorithms/dijkstra.js","PathfindingVisualizer/PathfindingVisualizer.js","routes/routes.js","App.js","index.js"],"names":["Home","className","to","type","class","React","Component","NavBar","Fragment","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","href","FooterBar","SortingVisualizer","props","state","array","this","resetArray","min","max","barAmount","Math","floor","window","screen","height","maxHeight","i","push","random","setState","console","log","map","value","idx","style","onClick","Node","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","getNewGridWithWallToggled","newGrid","slice","newNode","PathfindingVisualizer","getInitialGrid","currentRow","createNode","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","mouseIsPressed","nodesInShortestPathOrder","setTimeout","animateShortestPath","document","getElementById","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","y","x","visualizeDijkstra","clearGrid","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","SortingAlgorithmRoute","match","exact","path","url","component","Routes","PathFindingVisualizer","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.1a561d11.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nclass Home extends React.Component\r\n{\r\n    render()\r\n    {\r\n        return(<div className=\"container \">\r\n            <h1>WELCOME TO THE HOME OF VISUALIZED ALGORITHMS</h1>\r\n            <Link to=\"/sorting\"><button type=\"button\" class=\"btn btn-primary\">Sorting Algorithms</button></Link>\r\n            <Link to=\"/pathfinding\"><button type=\"button\" class=\"btn btn-primary\">Path Finding Algorithms</button></Link>\r\n        </div>)\r\n    }\r\n}\r\n\r\n\r\nexport default Home","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass NavBar extends React.Component{\r\n    render()\r\n    {\r\n        return(<React.Fragment>\r\n            <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n                    <div class=\"container-fluid\">\r\n                        <Link class=\"navbar-brand\" to=\"/\">Visual Algo</Link>\r\n                        <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span class=\"navbar-toggler-icon\"></span>\r\n                        </button>\r\n                        <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                        <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                            <li class=\"nav-item\">\r\n                                <Link class=\"nav-link\" href=\"#\">Merge Sort</Link>\r\n                            </li>\r\n                            <li class=\"nav-item\">\r\n                                <Link class=\"nav-link\" href=\"#\">Quick Sort</Link>\r\n                            </li>\r\n                            <li class=\"nav-item\">\r\n                                <Link class=\"nav-link\" href=\"#\">Bubble Sort</Link>\r\n                            </li>\r\n                            <li class=\"nav-item\">\r\n                                <Link class=\"nav-link\" href=\"#\">Merge Sort</Link>\r\n                            </li>\r\n                            <li class=\"nav-item\">\r\n                                <Link class=\"nav-link\" href=\"#\">Selection Sort</Link>\r\n                            </li>\r\n                            <li class=\"nav-item\">\r\n                                <Link class=\"nav-link\" href=\"#\">Random Quick Sort</Link>\r\n                            </li>\r\n                            <li class=\"nav-item\">\r\n                                <Link class=\"nav-link\" href=\"#\">Counting Sort</Link>\r\n                            </li>\r\n                            <li class=\"nav-item\">\r\n                                <Link class=\"nav-link\" href=\"#\">Radix Sort</Link>\r\n                            </li>\r\n                        </ul>\r\n                        </div>\r\n                    </div>\r\n                 </nav>\r\n                 </React.Fragment>)\r\n    }\r\n}\r\n\r\n\r\nexport default NavBar","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nclass FooterBar extends React.Component\r\n{\r\n    render()\r\n    {\r\n        return( <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n        <div class=\"container-fluid\">\r\n            <Link class=\"navbar-brand\" to=\"/\">Visual Algo</Link>\r\n            <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span class=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                <li class=\"nav-item\">\r\n                    <Link class=\"nav-link\" href=\"#\">Merge Sort</Link>\r\n                </li>\r\n                <li class=\"nav-item\">\r\n                    <Link class=\"nav-link\" href=\"#\">Quick Sort</Link>\r\n                </li>\r\n                <li class=\"nav-item\">\r\n                    <Link class=\"nav-link\" href=\"#\">Bubble Sort</Link>\r\n                </li>\r\n                <li class=\"nav-item\">\r\n                    <Link class=\"nav-link\" href=\"#\">Merge Sort</Link>\r\n                </li>\r\n                <li class=\"nav-item\">\r\n                    <Link class=\"nav-link\" href=\"#\">Selection Sort</Link>\r\n                </li>\r\n                <li class=\"nav-item\">\r\n                    <Link class=\"nav-link\" href=\"#\">Random Quick Sort</Link>\r\n                </li>\r\n                <li class=\"nav-item\">\r\n                    <Link class=\"nav-link\" href=\"#\">Counting Sort</Link>\r\n                </li>\r\n                <li class=\"nav-item\">\r\n                    <Link class=\"nav-link\" href=\"#\">Radix Sort</Link>\r\n                </li>\r\n            </ul>\r\n            </div>\r\n        </div>\r\n     </nav>)\r\n    }\r\n}\r\n\r\n\r\nexport default FooterBar","import React from 'react'\r\nimport './SortingVisualizer.css'\r\n\r\n//IMPORTS\r\nimport NavBar from '../Navbar/Navbar'\r\nimport FooterBar from '../FooterBar/footerbar'\r\n\r\nfunction randomIntFromInterval(min, max)\r\n{\r\n    return Math.floor(Math.random() * (max - min + 1)+min)\r\n}\r\n\r\nexport default class SortingVisualizer extends React.Component{\r\n    constructor(props)\r\n    {\r\n        super(props)\r\n\r\n        this.state = {\r\n            array: []\r\n        }\r\n    }\r\n\r\n\r\n\r\n    componentDidMount()\r\n    {\r\n        this.resetArray()\r\n    }\r\n\r\n    resetArray()\r\n    {\r\n        const array = []\r\n        let barAmount = Math.floor(window.screen.height/5)\r\n        let maxHeight = Math.floor(window.screen.height - 150)\r\n        for(let i  = 0; i < barAmount; i++)\r\n        {\r\n            array.push(randomIntFromInterval(5, maxHeight))\r\n        }\r\n\r\n        this.setState({array})\r\n        console.log(\"Window Height:\" , )\r\n    }\r\n\r\n    mergeSort()\r\n    {\r\n\r\n    }\r\n\r\n    bubbleSort()\r\n    {\r\n\r\n    }\r\n\r\n    heapSort()\r\n    {\r\n\r\n    }\r\n\r\n    bubbleSort()\r\n    {\r\n        \r\n    }\r\n\r\n\r\n    render()\r\n    {\r\n        const {array} = this.state\r\n        \r\n        return(\r\n            <React.Fragment >\r\n                \r\n                <NavBar></NavBar>\r\n                <div className=\"container\"> \r\n                    <div className=\"array-container\">\r\n                        {console.log(array)}\r\n                        {array.map((value, idx) => (\r\n                            <div\r\n                                className=\"array-bar\"\r\n                                key={idx}\r\n                                style={{height: `${value}px`}}\r\n                                >       \r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n                \r\n                <button onClick={() => {this.resetArray()}}>Generate Random Array</button>\r\n                <FooterBar></FooterBar>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n    \r\n}","import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n      : isWall\r\n      ? 'node-wall'\r\n      : '';\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}></div>\r\n    );\r\n  }\r\n}","// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    while (!!unvisitedNodes.length) {\r\n      sortNodesByDistance(unvisitedNodes);\r\n      const closestNode = unvisitedNodes.shift();\r\n      // If we encounter a wall, we skip it.\r\n      if (closestNode.isWall) continue;\r\n      // If the closest node is at a distance of infinity,\r\n      // we must be trapped and should therefore stop.\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === finishNode) return visitedNodesInOrder;\r\n      updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n  }\r\n  \r\n  function sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n  }\r\n  \r\n  function updateUnvisitedNeighbors(node, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      neighbor.distance = node.distance + 1;\r\n      neighbor.previousNode = node;\r\n    }\r\n  }\r\n  \r\n  function getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n  }\r\n  \r\n  function getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n      for (const node of row) {\r\n        nodes.push(node);\r\n      }\r\n    }\r\n    return nodes;\r\n  }\r\n  \r\n  // Backtracks from the finishNode to find the shortest path.\r\n  // Only works when called *after* the dijkstra method above.\r\n  export function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport NavBar from '../Navbar/Navbar'\r\n\r\n\r\nimport './PathfindingVisualizer.css';\r\n\r\n//Algorithm Imports\r\nimport {dijkstra, getNodesInShortestPathOrder} from '../Algorithms/PathFinding Algorithms/dijkstra';\r\n\r\n\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\nconst newGrid = grid.slice();\r\nconst node = newGrid[row][col];\r\nconst newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n};\r\nnewGrid[row][col] = newNode;\r\nreturn newGrid;\r\n};\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      row: 25,\r\n      col: 50,\r\n      mouseIsPressed: false,\r\n      START_NODE_ROW: 10,\r\n      START_NODE_COL: 15,\r\n      FINISH_NODE_ROW: 10,\r\n      FINISH_NODE_COL: 35\r\n    };\r\n  }\r\n\r\n   getInitialGrid = () => {\r\n        const grid = [];\r\n        for (let row = 0; row < this.state.row; row++) {\r\n            const currentRow = [];\r\n            for (let col = 0; col < this.state.col; col++) {\r\n                currentRow.push(this.createNode(col, row));\r\n            }\r\n            grid.push(currentRow);\r\n        }\r\n        return grid;\r\n    };\r\n\r\n    createNode = (col, row) => {\r\n        return {\r\n            col,\r\n            row,\r\n            isStart: row === this.state.START_NODE_ROW && col === this.state.START_NODE_COL,\r\n            isFinish: row === this.state.FINISH_NODE_ROW && col === this.state.FINISH_NODE_COL,\r\n            distance: Infinity,\r\n            isVisited: false,\r\n            isWall: false,\r\n            previousNode: null,\r\n        };\r\n    };\r\n\r\n  componentDidMount() {\r\n    const grid = this.getInitialGrid();\r\n    this.setState({grid});\r\n  }\r\n\r\n  handleMouseDown(row, col) \r\n  {\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid, mouseIsPressed: true});\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid});\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({mouseIsPressed: false});\r\n  }\r\n\r\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-visited';\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n      }, 50 * i);\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    const {grid} = this.state;\r\n    const startNode = grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\r\n    const finishNode = grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  clearGrid()\r\n  {\r\n    for(let y = 0; y < this.state.grid.length; y++)\r\n    {\r\n        for(let x= 0; x < this.state.grid[y].length; x++)\r\n        {\r\n         \r\n          document.getElementById(`node-${y}-${x}`).className = 'node'\r\n        }\r\n    }\r\n    //set up the position for start and finish\r\n    document.getElementById(`node-${this.state.START_NODE_ROW}-${this.state.START_NODE_COL}`).className = 'node node-start'\r\n    document.getElementById(`node-${this.state.FINISH_NODE_ROW}-${this.state.FINISH_NODE_COL}`).className = 'node node-finish'\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n      <NavBar></NavBar>\r\n        <button onClick={() => this.visualizeDijkstra()}>\r\n          Visualize Dijkstra's Algorithm\r\n        </button>\r\n        <button onClick={() => this.clearGrid()}>\r\n          Clear Grid\r\n        </button>\r\n        <div className=\"container\">\r\n            <div className=\" grid\">\r\n                {this.state.grid.map((row, rowIdx) => {\r\n                    return (\r\n                    <div key={rowIdx}>\r\n                        {row.map((node, nodeIdx) => {\r\n                        const {row, col, isFinish, isStart, isWall} = node;\r\n                        return (\r\n                            <Node\r\n                                key={nodeIdx}\r\n                                col={col}\r\n                                isFinish={isFinish}\r\n                                isStart={isStart}\r\n                                isWall={isWall}\r\n                                mouseIsPressed={this.state.mouseIsPressed}\r\n                                onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                                onMouseEnter={(row, col) =>\r\n                                    this.handleMouseEnter(row, col)\r\n                                }\r\n                                onMouseUp={() => this.handleMouseUp()}\r\n                                row={row}>\r\n                            </Node>\r\n                        );\r\n                        })}\r\n                    </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\n","import React from 'react'\r\nimport {BrowserRouter, Route} from 'react-router-dom'\r\n\r\nimport Home from '../Home/Home'\r\n\r\n\r\n//Algorithm Page\r\nimport SortingVisualizer from '../SortingVisualizer/SortingVisualizer'\r\nimport PathFindingVisualizer from '../PathfindingVisualizer/PathfindingVisualizer'\r\n\r\nconst SortingAlgorithmRoute = ({ match }) => (\r\n    <div>\r\n        <Route exact path={match.url} component={SortingVisualizer}/>\r\n    </div>\r\n)\r\n\r\nlet Routes = () => {\r\n    return (<div>\r\n        <BrowserRouter>\r\n            <Route exact path=\"/\" component={Home}/>\r\n            <Route exact path=\"/sorting\" component={SortingAlgorithmRoute}/>\r\n            <Route exact path=\"/pathfinding\" component={PathFindingVisualizer}/>\r\n        </BrowserRouter>\r\n    </div>)\r\n}\r\n\r\n\r\nexport default Routes","import Routes from './routes/routes'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Routes></Routes>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}